name: CI
on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      MESSAGE: ${{ github.event.head_commit.message }}
      RELEASE_BRANCH: "master"
    strategy:
      matrix:
        node-version: [12.x]
    steps:
      - name: Get branch name (merge)
        if: github.event_name != 'pull_request'
        shell: bash
        run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV
      - name: Get branch name (pull request)
        if: github.event_name == 'pull_request'
        shell: bash
        run: echo "BRANCH_NAME=$(echo ${GITHUB_HEAD_REF} | tr / -)" >> $GITHUB_ENV
      - name: Print Branch Name
        run: echo ${{ env.BRANCH_NAME }}
      - name: "Check Patch Level"
        run: |
          echo Commit Message ${MESSAGE}
          case "${MESSAGE}" in 
            *#major*) PATCH="major";;
            *#minor*) PATCH="minor";;
            *#patch*) PATCH="patch";;
            *#none*)  PATCH="";;
            *) PATCH="patch";;
          esac
          if [[ "${{ env.BRANCH_NAME }}" != "${RELEASE_BRANCH}" ]]; then
            echo "Not main branch, resetting PATCH from ${PATCH}"
            PATCH="prepatch"
          fi
          echo "PATCH=${PATCH}" >> $GITHUB_ENV
          echo "Patch level: ${PATCH}"
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        run: npm ci
      - name: Set image version
        run: |
          if [[ "${{ env.PATCH }}" ]]; then
            npm version "${{ env.PATCH }}" --no-git-tag-version -m "${MESSAGE}"
          fi
          echo "VERSION=$(npm pkg get version | sed -e 's/"//g')" >> $GITHUB_ENV
      - name: Lint
        run: |
          npm run lint
          npm run stylelint
      - name: Build Release
        run: |
          npm run release
          echo "${{ env.BRANCH_NAME }}@${{ env.VERSION }}" | tee dist/version
          # Move release content to avoid .dockerignore
          mv dist dist_release
      - name: "Build Docker Image"
        run: docker build -t "chronmaps/frontend:latest" -t "chronmaps/frontend:${{ env.BRANCH_NAME }}" -t "chronmaps/frontend:${{ env.VERSION }}" . -f Dockerfile.prebuild
      
      - name: "Publish Docker Image"
        run: |
          docker login -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_PASSWORD }}
          if [[ "${{ env.BRANCH_NAME }}" == "${RELEASE_BRANCH}" ]]; then
            echo "Publish Release Tags"
            docker push "chronmaps/frontend:latest"
            docker push "chronmaps/frontend:${{ env.VERSION }}"
          else
            echo "Publish Branch Tags"
            docker push "chronmaps/frontend:${{ env.BRANCH_NAME }}"
          fi
      - name: Bump version and push tag
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
        uses: anothrNick/github-tag-action@1.36.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WITH_V: true
          CUSTOM_TAG: ${{ env.VERSION }}

